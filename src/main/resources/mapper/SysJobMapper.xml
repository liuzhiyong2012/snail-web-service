<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.snail.web.modules.quartz.mapper.SysJobMapper">

	<select id="count" resultType="java.lang.Integer">
		select count(1) from `sys_job` job
		where 1=1 and  is_deleted != 1
		<if test="jobName != null and jobName != ''">
			AND job_name like concat('%', #{jobName}, '%')
		</if>
		<if test="jobGroup != null and jobGroup != ''">
			AND job_group = #{jobGroup}
		</if>
		<if test="status != null and status != ''">
			AND status = #{status}
		</if>
		<if test="invokeTarget != null and invokeTarget != ''">
			AND invoke_target like concat('%', #{invokeTarget}, '%')
		</if>
		limit #{start},#{pageSize}
	</select>

	<select id="page" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
		where 1=1 and  is_deleted != 1
		<if test="jobName != null and jobName != ''">
			AND job_name like concat('%', #{jobName}, '%')
		</if>
		<if test="jobGroup != null and jobGroup != ''">
			AND job_group = #{jobGroup}
		</if>
		<if test="status != null and status != ''">
			AND status = #{status}
		</if>
		<if test="invokeTarget != null and invokeTarget != ''">
			AND invoke_target like concat('%', #{invokeTarget}, '%')
		</if>
		order by updated_time desc, created_time desc
		limit #{start},#{pageSize}
	</select>

	<resultMap type="com.snail.web.modules.quartz.dto.entity.SysJob" id="SysJobResult">
		<id     property="id"          column="id"          />
		<result property="jobName"        column="job_name"        />
		<result property="jobGroup"       column="job_group"       />
		<result property="invokeTarget"   column="invoke_target"   />
		<result property="cronExpression" column="cron_expression" />
		<result property="misfirePolicy"  column="misfire_policy"  />
		<result property="concurrent"     column="concurrent"      />
		<result property="status"         column="status"          />
		<result property="createdBy"       column="created_by"       />
		<result property="createdTime"     column="created_time"     />
		<result property="updatedBy"       column="updated_by"       />
		<result property="updatedTime"     column="updated_time"     />
		<result property="remark"         column="remark"          />
	</resultMap>

	<sql id="selectJobVo">
        select id, job_name, job_group, invoke_target, cron_expression, misfire_policy, concurrent, status, created_by, created_time, remark
		from sys_job
    </sql>



	<select id="selectJobList" parameterType="com.snail.web.modules.quartz.dto.entity.SysJob" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
		<where>

				AND is_deleted != 1

			<if test="jobName != null and jobName != ''">
				AND job_name like concat('%', #{jobName}, '%')
			</if>
			<if test="jobGroup != null and jobGroup != ''">
				AND job_group = #{jobGroup}
			</if>
			<if test="status != null and status != ''">
				AND status = #{status}
			</if>
			<if test="invokeTarget != null and invokeTarget != ''">
				AND invoke_target like concat('%', #{invokeTarget}, '%')
			</if>
		</where>
	</select>

	<select id="selectJobAll" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
	</select>

	<select id="selectJobById" parameterType="Long" resultMap="SysJobResult">
		<include refid="selectJobVo"/>
		where id = #{id}
	</select>


	<update id="deleteJobById" parameterType="Long">
 		update sys_job set is_deleted = 1 where id = #{id}
 	</update>

 	<delete id="deleteJobByIds" parameterType="Long">
 		delete from sys_job where id in
 		<foreach collection="array" item="id" open="(" separator="," close=")">
 			#{id}
        </foreach>
 	</delete>

 	<update id="updateJob" parameterType="com.snail.web.modules.quartz.dto.entity.SysJob">
 		update sys_job
 		<set>
 			<if test="jobName != null and jobName != ''">job_name = #{jobName},</if>
 			<if test="jobGroup != null and jobGroup != ''">job_group = #{jobGroup},</if>
 			<if test="invokeTarget != null and invokeTarget != ''">invoke_target = #{invokeTarget},</if>
 			<if test="cronExpression != null and cronExpression != ''">cron_expression = #{cronExpression},</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">misfire_policy = #{misfirePolicy},</if>
 			<if test="concurrent != null and concurrent != ''">concurrent = #{concurrent},</if>
 			<if test="status !=null">status = #{status},</if>
 			<if test="remark != null and remark != ''">remark = #{remark},</if>
 			<if test="updatedBy != null and updatedBy != ''">update_by = #{updatedBy},</if>
 			updated_time = sysdate()
 		</set>
 		where id = #{id}
	</update>

 	<insert id="insertJob" parameterType="com.snail.web.modules.quartz.dto.entity.SysJob" useGeneratedKeys="true" keyProperty="id">
 		insert into sys_job(
 			<if test="id != null and id != 0">id,</if>
 			<if test="jobName != null and jobName != ''">job_name,</if>
 			<if test="jobGroup != null and jobGroup != ''">job_group,</if>
 			<if test="invokeTarget != null and invokeTarget != ''">invoke_target,</if>
 			<if test="cronExpression != null and cronExpression != ''">cron_expression,</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">misfire_policy,</if>
 			<if test="concurrent != null and concurrent != ''">concurrent,</if>
 			<if test="status != null and status != ''">status,</if>
 			<if test="remark != null and remark != ''">remark,</if>
 			<if test="createdBy != null and createdBy != ''">created_by,</if>
 			created_time,
 			is_deleted
 		)values(
 			<if test="id != null and id != 0">#{id},</if>
 			<if test="jobName != null and jobName != ''">#{jobName},</if>
 			<if test="jobGroup != null and jobGroup != ''">#{jobGroup},</if>
 			<if test="invokeTarget != null and invokeTarget != ''">#{invokeTarget},</if>
 			<if test="cronExpression != null and cronExpression != ''">#{cronExpression},</if>
 			<if test="misfirePolicy != null and misfirePolicy != ''">#{misfirePolicy},</if>
 			<if test="concurrent != null and concurrent != ''">#{concurrent},</if>
 			<if test="status != null and status != ''">#{status},</if>
 			<if test="remark != null and remark != ''">#{remark},</if>
 			<if test="createdBy != null and createdBy != ''">#{createdBy},</if>
 			sysdate(),
 			0
 		)
	</insert>

</mapper>
